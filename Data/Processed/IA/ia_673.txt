{'user': 'Anonymous', 'message': 'Create CRUD for this user story  As a logged out user, I can sign up as a Client As a logged out but signed up user I can log in as a Client  As a logged in Client, I can login to access my profile As a logged in Client, I can create, get, update, and delete available services using the front end  As a logged in Client I can create checklists for each service, and update, edit, delete each checklist or  checklist entry. As a logged in Client, I can view appointments and submission inquiries from customers As a logged in Client I can approve or deny an appointment As a logged in Client I can get a list of upcoming, approved appointments, get details of appointment, update or delete  appointment As a logged in Client I can create, get a list of, get details of, update, and delete a technician  As a logged in business owner, I can access my technician list and complete service history As a logged in business owner, I can logout and return to the hero page   As a logged in technician, I can see my technician profile with completed service history As a logged in technician, I can view service appointments and details As a logged in technician I can logout and return to the hero page As customer, I can input my customer information and service of interest inquiry, and submit the data on the front end. Stretch Goal As a logged in technician, I can start my service / job timer Here are the associated models.  Client Model: Business Name Business Email Business Address Business Phone Technician Model: Employee ID (serialized by DB) First Name Last Name Personal Email Phone Number Client / Business Foreign Key Appointment Model: Customer Name Customer Phone Number Vehicle Make Vehicle Model Vehicle Year Vehicle Color is_approved (default=false) timer_total (null=true) Notes Service Foreign Key Service Model: Service Name Service Type Service Description Service Price Checklist Foreign Key Checklist Model: Input Name after writing all the API endpoints for CRUD create endpoint templates for each one.  Use the following template to describe each of your endpoints. It\'s not uncommon for a non-trivial application to have at least 30 endpoints. Don\'t be afraid of "too many." Everything between the guillemots (« and ») should be replaced by you to describe the endpoint. ### «Human-readable of the endpoint» * Endpoint path: «path to use» * Endpoint method: «HTTP method» * Query parameters:  * «name»: «purpose» * Headers:  * Authorization: Bearer token * Request shape (JSON):  ```json  «JSON-looking thing that has the  keys and types in it»  ``` * Response: «Human-readable description  of response» * Response shape (JSON):  ```json  «JSON-looking thing that has the  keys and types in it»  ``` Mandatory fields are: Endpoint path Endpoint method Response Response shape If your endpoint needs to know who the person is, then include the Headers/Authorization part. If your endpoint is a POST, PUT, or PATCH, include the Request shape