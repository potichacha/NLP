Write a complete C++ implementation for FizzBuzz.

Here is a complete C++ implementation for FizzBuzz: This program uses a for loop to iterate from 1 to 100, and for each number it checks whether it is divisible by 3, 5, or both 3 and 5. If it is divisible by 3 and 5, it prints "FizzBuzz"; if it is only divisible by 3, it prints "Fizz"; if it is only divisible by 5, it prints "Buzz"; otherwise, it prints the number itself. The output of this program would be:

Great, now change the code so that the iteration length is provided by the user through stdin.

Here is a modified version of the FizzBuzz program that takes the iteration length from the user through standard input: In this version, the program first prompts the user to enter the iteration length, and then reads the value from standard input using the  std::cin  object. The for loop uses this value as the upper bound for the iteration. For example, if the user enters the value  20 , the output of the program would be:

Now instead of reading from stdin, let's pass the iteration length as a command line argument.

Here is a modified version of the FizzBuzz program that takes the iteration length from the command line arguments: In this version, the program takes the iteration length as a command line argument. The  argc  and  argv  parameters of the  main  function are used to access the command line arguments. The program first checks whether the number of arguments is correct (there should be exactly two arguments, the program name and the iteration length). If the number of arguments is incorrect, the program prints an error message and returns an error code. Otherwise, the program converts the iteration length argument from a string to an integer using the  std::atoi  function, and then uses this value as the upper bound for the iteration in the for loop. For example, if the program is called with the argument  20 , the output of the program would be the same as in the previous example:

What if the iteration length provided by the user isn't valid? Let's print an error message and exit early in this case.

Here is a modified version of the FizzBuzz program that checks for a valid iteration length and exits early if it is not valid: In this version, the program first checks whether the number of arguments is correct, and then it checks whether the iteration length is a positive integer. If either of these checks fails, the program prints an error message and returns an error code. Otherwise, it proceeds with the for loop and prints the FizzBuzz sequence. For example, if the program is called with the argument  0 , the output would be: