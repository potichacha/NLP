{'user': 'Anonymous', 'message': '總結以下內容:InfoQ：James，最近您在关注哪些技术？有关注最近热度爆炸的 ChatGPT 吗？   James Lewis：我自己一直在研究跟机器学习或者机器学习算法（即基于智能体的模型）相关的东西，但这跟 ChatGPT 并不完全是一回事。ChatGPT 非常有趣，人们也都在关注它。   之所以引起如此广泛的关注，是因为它的访问门槛很低。不只是像我这样的极客或者技术爱好者，技术社区中的所有人都能以非编程的方式来体验。   我还认识一位教师好友，他甚至开始在学校专门拿出时间，告诉学生们 ChatGPT 可以用来做什么、不能用来做什么。总之，ChatGPT已经在自上而下改变我们整个社会。从开发的角度，或者说开发者的角度看，我觉得应该考虑 ChatGPT 会不会被集成到 Visual Studio Code 这类环境中了。大到微软 Azure，小到各类搜索引擎，各方都在像拥抱自动驾驶那样拥抱 ChatGPT。   所以在我看来，这绝对是接下来几年的最大热点。而且新版本不是很快就要出来了吗，在 4.0 版本亮相后，相信会更有趣。   InfoQ：您亲自体验过 ChatGPT 了吗？   James Lewis：我还没试过。很遗憾，我一直没腾出时间来。   InfoQ：那等您试过我们再来聊聊感受吧。众所周知，ChatGPT 大火后，AI 热度再次高涨。那您认为云计算和 AI 的崛起对 Thoughtworks 的技术发展将会带来哪些影响？   James Lewis：我觉得有趣的进展正在出现，也诞生了不少非常有趣的成果。未来还会有哪些惊喜在等着我们目前仍是未知的。我认为，机器学习的崛起和在线机器学习的可访问性的发展趋势已逐渐明朗。   ChatGPT 无疑也是这波浪潮中的一个助推力。除此之外，我们将有能力在手机上运行TensorFlow之类，或者深入访问到原本只有数据科学家和从事项目工作的开发人员才能接触的技术。   所以我觉得，这肯定是个令人兴奋且值得探索的方向。另外，Thoughtworks 在芬兰赫尔辛基设有办公室，在那里工作的是一群机器学习专家。他们正在努力开发机器学习酿造威士忌的第二个大版本，就是用机器学习算法来帮助威士忌设计风味组合，有很多创意是人类根本想不到的。   到目前为止，他们已经赢下两项大奖。所以这挺有意思的，包括机器学习和数据科学的实际应用。再有，我对Kuberentes的持续崛起也很感兴趣，如今 Kubernetes 和容器化几乎已经无处不在，甚至成了目前最普遍的客观运行时标准。我觉得这股趋势还将持续下去。   2015 到 2020 年间，Java 曾经承诺提供广泛可移植性。而直到多年之后，这种可移植性才由 Docker 和 Kubernetes 真正实现。'}
{'user': 'Chat GPT', 'message': '总结： James Lewis 关注机器学习和机器学习算法相关的技术，并认为 ChatGPT 是接下来几年的最大热点。他认为云计算和 AI 的崛起对 Thoughtworks 的技术发展将会带来许多影响，机器学习的崛起和在线机器学习的可访问性的发展趋势已逐渐明朗。他也对 Kubernetes 的持续崛起很感兴趣，认为容器化和 Kubernetes 已经成为客观运行时标准。最后，他也提到了 Thoughtworks 在芬兰赫尔辛基设有办公室，正在开发用机器学习算法来帮助威士忌设计风味组合的项目。'}
{'user': 'Anonymous', 'message': 'InfoQ：技术总是瞬息万变的，在过去一年，Thoughtworks 发生了哪些让您印象深刻的事？   James Lewis：我觉得这期间最有趣的一件事，就是 Thoughtworks 向着可持续性、特别是可持续计算的真正转变。这种转变不再是单纯跟风，而是主动求变。   如今，各个行业都在讨论可持续性问题，讨论如何编写更多可持续软件，如何将更多可持续软件交付至生产当中。我们的CTO Rebecca Parsons博士就很关注这个问题，而且投入了很多时间。我们的广泛云迁移其实加深了这个问题的现实意义，因为我们已经能随时随地使用计算和存储资源，不太用考虑资源边界的问题。但这也衍生出来了新的问题，就是开发者在编写代码时不太重视对机器、硬件和软件的充分利用。   比如说，我们遇到的一个现实问题就是机械同感。提出这个概念的人叫 Martin Thompson，机械同感是指所编写的代码要能完全利用硬件资源。也就是说，如果负载在一、两台机器上就能运行，那就别用 10 台甚至是 50 台机器。这样，我们可以大大节约耗电量。   虽然我们 Thoughtworks 还没有在这方面倾注全部精力，但很多客户确实都在咨询。市场上似乎出现了一种普遍情绪，所以我们也是时候认真考虑手头工作的可持续性了。   InfoQ：所以您想说的是，想让代码能够完全利用硬件资源，就要优化旧的代码，对吗？但优化代码可并不容易，您能分享一些对优化代码的思路吗？   James Lewis：这是个很好的问题。没错，这事绝不简单，特别是在当下。也许我说得有失公允，但整整一代软件开发者其实是把大量时间花在了拼接上，他们主要用JavaScript做开发。   但突然之间，你去要求他们优化代码来匹配芯片和裸片上的 L2 或者 L3 缓存，从而实现特定的数据结构、应用数据原理，或者是把数据聚合在一起，这对他们都是前所未有的新技术。实际上这些技术并不新，但对他们来说很新。而只有这样，才有可能真正充分利用硬件。举个例子，LMAX 有种模式叫 disrupter pattern，我们在 Tech Radar 上用过，大概是六、七年前的事了。那里面就体现了真正的优化和机械同感思路，能让用户在一台笔记本电脑上运行大量并发工作负载，从而通过单一线程每秒运行数亿条消息。真的很棒。   如今我们跟大家交谈，他们总会说需要大量云端资源才能实现某个目标。但实际上，如果大家真的熟悉硬件、理解底层技术，就会知道代码完全可以跑得更快。在本质上，就是使用更少资源，创造更健康的自然环境。   InfoQ：听说您已经在 Thoughtworks 工作了 14 年以上，这么多年的工作经历中，您感受最深的技术变革是什么？   James Lewis：其实我在 Thoughtworks 已经不止 14 年了。这是很长一段时间，感受深刻的变革也太多了。我在这里接触过太多工作类型、见过太多出色的人，也感受过无数影响深远的变革。但如果纵观整个技术发展历程，就会发现其中大部分成果诞生在过去 10 年之内。   我最先想到的应该是持续交付与持续部署。其实相关概念早在 2011 年前后就出现了，但现在每个人都在对从构思到生产的整个编码路径做优化。我的好友 Daniel 就说过，他特别喜欢自己的灵感能化为客户的一句“谢谢”。他特别喜欢那种“你很好地完成了工作，谢谢”的感觉，既友善又温暖。我觉得这挺好，但应该不止于此。随着持续交付，基础设施也成了代码，于是我们开始将基础设施定义为可应答的成本要素。同时，Docker也掀