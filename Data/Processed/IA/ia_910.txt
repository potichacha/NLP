The email verification functionality in my code generates links that never expire. How can that be exploited by an adversary, and how can I mitigate the issue? from django.contrib.auth import get_user_model from rest_framework import permissions, viewsets, filters, status, generics, views from apps.users.serializers import * from rest_framework.permissions import IsAuthenticated, AllowAny from rest_framework_simplejwt.views import TokenObtainPairView, TokenRefreshView from rest_framework_simplejwt.tokens import RefreshToken from rest_framework_simplejwt.exceptions import TokenError, InvalidToken from rest_framework.response import Response from django.shortcuts import redirect from django.contrib.sites.shortcuts import get_current_site from django.conf import settings from django.core.mail import EmailMessage from django.utils.http import urlsafe_base64_encode, urlsafe_base64_decode from django.contrib.sites.shortcuts import get_current_site from django.urls import reverse_lazy from django.contrib.auth.tokens import PasswordResetTokenGenerator from django.utils.encoding import force_bytes, force_str from .models import Document from rest_framework.parsers import MultiPartParser, FormParser from django.http import HttpResponse, HttpResponseNotFound from django.core.exceptions import PermissionDenied from apps.help_requests.models import HelpRequest from .permissions import DocumentPermission class UserViewSet(viewsets.ModelViewSet):  """ViewSet for viewing user instances"""  http_method_names = [\