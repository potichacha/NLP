I have two dicts in python and i was wondering about the order of which keys/values will be returned if i use keys()/values()/items(). Can i compare the keys() of two dicts? Can i compare the values() of two dicts?

In Python, dictionaries are unordered data structures, which means that the order of the keys, values, and items returned by the  keys() ,  values() , and  items()  methods respectively is not guaranteed to be the same every time you iterate over them. So, you cannot compare the order of the keys or values of two different dictionaries directly. However, you can compare the keys and values themselves. Here's how: To compare the keys of two dictionaries, you can convert the  keys()  method of each dictionary to a set and then compare the sets using the  ==  operator. For example: To compare the values of two dictionaries, you can convert the  values()  method of each dictionary to a set and then compare the sets using the  ==  operator. For example: Note that the  ==  operator checks if the sets have the same elements, regardless of their order. If you need to check if the dictionaries have the same keys and values in the same order, you can convert the dictionaries to lists of tuples using the  items()  method and compare them directly. For example:

but i checked and it seems that keys() returns a dict_keys object which seems to behave like a set, meaning, no matter the order of the keys in the dict_keys, it will treat "==" as sets do. Is this correct?

Yes, you are correct. In Python 3.x, the  keys()  method returns a  dict_keys  object, which behaves like a set and is actually a view object of the keys in the dictionary. This means that you can compare two  dict_keys  objects directly using the  ==  operator, and it will return  True  if they contain the same keys, regardless of their order. For example: Similarly, you can compare two  dict_values  objects or two  dict_items  objects directly using the  ==  operator, and it will return  True  if they contain the same values or key-value pairs, respectively, regardless of their order. However, it's important to note that this behavior is specific to Python 3.x. In Python 2.x, the  keys() ,  values() , and  items()  methods return lists, not view objects, and comparing two lists using the  ==  operator only returns  True  if they have the same elements in the same order.

Almost good, though, i ran this code which has two dicts with similar keys and similar values (not the same key-value though). As you mentioned, i expected values() and keys() to be True if they behave like a set, but this is what i ran and what i got - d1 = {"2":3, "1": 32, "3": 11, "4": 44} d2 = {"1":3, "3": 32, "4": 44, "2": 11} print(d1.values()) print(d2.values()) print(f\