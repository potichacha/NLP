What is relation between static keyword in C and program compilation ? How static keyword affects programming compilation ?

In C programming language, the  static  keyword is used to declare variables, functions, and blocks of code with a "static storage class". When a variable is declared with the  static  keyword inside a function, the variable is not destroyed when the function is exited. Instead, the variable retains its value and can be accessed again the next time the function is called. When a function is declared with the  static  keyword, the function can only be called from within the file where it is defined. This is known as "internal linkage" and can help to avoid naming conflicts with functions of the same name in other files. The  static  keyword can also be used to define a "static block" of code that is only executed once when the program is first loaded into memory. This can be useful for initializing variables or setting up data structures before the program starts executing. In terms of program compilation, the  static  keyword can affect how variables and functions are allocated in memory. When a variable is declared with the  static  keyword, it is allocated in a special area of memory called the "data segment". This is different from variables declared without the  static  keyword, which are usually allocated on the stack or the heap. Similarly, when a function is declared with the  static  keyword, it is allocated in a different section of the program\

Explain me this in detail. "The static keyword can also be used to define a "static block" of code that is only executed once when the program is first loaded into memory. This can be useful for initializing variables or setting up data structures before the program starts executing."