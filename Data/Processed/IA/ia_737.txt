#pragma once #include  #include  /***CHANGE THIS VALUE TO YOUR LARGEST KCAS SIZE ****/ #define MAX_KCAS 6 // at most 6 in erase() /***CHANGE THIS VALUE TO YOUR LARGEST KCAS SIZE ****/ #include "../kcas/kcas.h" using namespace std; class ExternalKCAS { private:   struct Node {  int key;  casword left;  casword right;  casword marked;  bool isLeaf() {  bool result = (left == NULL);  assert(!result || right == NULL);  return result;  }  bool isParentOf(Node *other) {  return (left == other || right == other);  }  };  struct SearchRecord {  Node * gp;  Node * p;  Node * n;    SearchRecord(Node * _gp, Node * _p, Node * _n)  : gp(_gp), p(_p), n(_n) {  }  };  volatile char padding0[PADDING_BYTES];  const int numThreads;  const int minKey;  const int maxKey;  volatile char padding1[PADDING_BYTES];  Node *root;  volatile char padding2[PADDING_BYTES]; public:  ExternalKCAS(const int _numThreads, const int _minKey, const int _maxKey);  ~ExternalKCAS();  long compareTo(int a, int b);  bool contains(const int tid, const int & key);  bool insertIfAbsent(const int tid, const int & key); // try to insert key; return true if successful (if it doesn\