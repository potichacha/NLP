{'user': 'Anonymous', 'message': 'The email verification functionality in my code generates links that never expire. How can that be exploited by an adversary, and how can I mitigate the issue? from django.contrib.auth import get_user_model from rest_framework import permissions, viewsets, filters, status, generics, views from apps.users.serializers import * from rest_framework.permissions import IsAuthenticated, AllowAny from rest_framework_simplejwt.views import TokenObtainPairView, TokenRefreshView from rest_framework_simplejwt.tokens import RefreshToken from rest_framework_simplejwt.exceptions import TokenError, InvalidToken from rest_framework.response import Response from django.shortcuts import redirect from django.contrib.sites.shortcuts import get_current_site from django.conf import settings from django.core.mail import EmailMessage from django.utils.http import urlsafe_base64_encode, urlsafe_base64_decode from django.contrib.sites.shortcuts import get_current_site from django.urls import reverse_lazy from django.contrib.auth.tokens import PasswordResetTokenGenerator from django.utils.encoding import force_bytes, force_str from .models import Document from rest_framework.parsers import MultiPartParser, FormParser from django.http import HttpResponse, HttpResponseNotFound from django.core.exceptions import PermissionDenied from apps.help_requests.models import HelpRequest from .permissions import DocumentPermission class UserViewSet(viewsets.ModelViewSet):  """ViewSet for viewing user instances"""  http_method_names = [\'get\']  serializer_class = UserSerializer  permission_classes = (IsAuthenticated,)  def get_queryset(self):  if self.request.user.is_superuser: # Admin users can see info of every user  return get_user_model().objects.all()  else:  # Normal users only see information about themselves  return get_user_model().objects.filter(pk=self.request.user.id) class RegistrationViewSet(viewsets.ModelViewSet, TokenObtainPairView):  """ViewSet for registering new users"""  serializer_class = RegisterSerializer  permission_classes = (AllowAny,)  http_method_names = [\'post\']  def create(self, request, *args, **kwargs):  serializer = self.get_serializer(data=request.data)  serializer.is_valid(raise_exception=True)  user = serializer.save()  # Create refresh token for user using simplejwt  refresh = RefreshToken.for_user(user)  res = {  "refresh": str(refresh),  "access": str(refresh.access_token),  }  return Response({  "user": serializer.data,  "refresh": res["refresh"],  "token": res["access"]  }, status=status.HTTP_201_CREATED) class LoginViewSet(viewsets.ModelViewSet, TokenObtainPairView):  """ViewSet for logging in users. Extended from TokenObtainPairView"""  serializer_class = LoginSerializer  permission_classes = (AllowAny,)  http_method_names = [\'post\'] # Only allow POST requests  def create(self, request, *args, **kwargs):  serializer = self.get_serializer(data=request.data)  try:  serializer.is_valid(raise_exception=True)  e