{'user': 'Anonymous', 'message': "You are an expert Ruby programmer.  Please write a `Rubocop` cop that check if an incorrect method for job type is used for enqueueing a background job. Requirements:  - when enqueueing `ActiveJob` jobs - `perform_async` method must not be used, `perform_later` method must be used instead - when enqueueing native `Sidekiq` jobs - `perform_later` method must not be used, `perform_async` method must be used instead Additional information: - the project is using both `ActiveJob` and `Sidekiq` native workers(jobs) - `ActiveJob` job classes inherit from `ApplicationJob` or `ActiveJob::Base` - `Sidekiq` job classes include `Sidekiq::Job` module - all jobs are located in `app/jobs` directory and it's subdirectories - all jobs use `Job` suffix for class name - the project use `Zeitwerk`/`Rails` naming convetion - `Rubocop` cops are using `ArcadiaCops` namespace Examples: - Example 1:  for a Example1Job that is an ActiveJob job located in `app/jobs/example_1_job.rb` file and defined as:  ```  class Example1Job < ApplicationJob  def perform; end  end  ```  good:  ```  Example1Job.perform_later  ```  bad:  ```  Example1Job.perform_async  ``` - Example 2:  for a Example2Job that is an Sidekiq job located in `app/jobs/example_2_job.rb` file and defined as:  ```  class Example1Job  include Sidekiq::Job  def perform; end  end  ```  good:  ```  Example1Job.perform_async  ```  bad:  ```  Example1Job.perform_later  ``` Ask me questions if you need more information"}
{'user': 'Chat GPT', 'message': "Here's a Rubocop cop that checks for incorrect method usage when enqueueing ActiveJob and Sidekiq jobs: This cop checks for incorrect method usage when enqueueing ActiveJob and Sidekiq jobs. It first checks if the node is enqueueing a job, and then it tries to find the corresponding job class. If the class is an ActiveJob-based job and uses the  perform_async  method, or if it's a native Sidekiq job and uses the  perform_later  method, the cop will add an offense. Please let me know if you need further assistance or have any questions."}
{'user': 'Anonymous', 'message': "Include this additional requirements: - job classes are not loaded into the memory, you can't access them as objects and need to resort to static code analysis / file parsing - each job class definition is defined in a separate file in `app/jobs` or it's subdirectory - jobs can be enqueued (using perform_async or perform_later method) from any file in the project"}
{'user': 'Chat GPT', 'message': "Given the new requirements, I've updated the Rubocop cop as follows: This updated cop now uses static code analysis for checking whether a job class is an ActiveJob-based or native Sidekiq job. It reads the job file content and uses regular expressions to determine the job type. It still checks if the node is enqueueing a job, and if the corresponding job type is incorrect, the cop will add an offense."}
{'user': 'Anonymous', 'message': 'Include this additional requirements: -